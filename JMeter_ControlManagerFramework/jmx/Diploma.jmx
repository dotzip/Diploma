<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan PCO Solution" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518442030000</longProp>
        <longProp name="ThreadGroup.end_time">1518442030000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Users\c22466a\Documents\Diploma\apache-jmeter-3.3\browser_drivers\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.support.ui.WebDriverWait
import org.apache.jmeter.threads.JMeterContextService

def vars = JMeterContextService.getContext().getVariables()
// Waiting for driver initialize
WebDriverWait driverWait = new WebDriverWait(WDS.browser, 60)
vars.putObject(&quot;DRIVER_WAIT&quot;, driverWait)
//System properties for browser driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;C:\\Users\\c22466a\\Documents\\Diploma\\apache-jmeter-3.3\\browser_drivers\\chromedriver.exe&quot;)

WDS.log.info(&apos;Login&apos;)
WDS.sampleResult.subSampleStart(&apos;&gt;&gt;&gt; Get page&apos;)
WDS.browser.get(&quot;http://sso.experian.local:8080/sso/UI/Login?realm=TENANT1&quot;)
WDS.sampleResult.subSampleEnd(true)

WDS.browser.findElement(By.id(&quot;IDToken1&quot;)).click()
WDS.browser.findElement(By.id(&quot;IDToken1&quot;)).sendKeys(&quot;john&quot;)
WDS.browser.findElement(By.id(&quot;IDToken2&quot;)).click()
WDS.browser.findElement(By.id(&quot;IDToken2&quot;)).sendKeys(&quot;Admin123!&quot;)

WDS.sampleResult.subSampleStart(&apos;&gt;&gt;&gt; Login&apos;)
WDS.browser.findElement(By.name(&quot;Login.Submit&quot;)).click()
driverWait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//ul[@id=&apos;menu&apos;]/li[2]&quot;))) // waiting when homepage will be load
WDS.sampleResult.subSampleEnd(true)

WDS.sampleResult.subSampleStart(&apos;&gt;&gt;&gt; New App&apos;)
WDS.browser.findElement(By.xpath(&quot;//ul[@id=&apos;menu&apos;]/li[2]&quot;)).click()
WDS.browser.findElement(By.xpath(&quot;//ul[@id=&apos;menu&apos;]/li[2]/ul/li[1]&quot;)).click()
WDS.sampleResult.subSampleEnd(true)
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Control Manager Framework" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.support.ui.Select
import org.openqa.selenium.support.ui.WebDriverWait
import org.apache.poi.hssf.usermodel.HSSFRow
import org.apache.poi.hssf.usermodel.HSSFSheet
import org.apache.poi.hssf.usermodel.HSSFWorkbook
import java.util.concurrent.TimeUnit
import org.apache.jmeter.threads.JMeterContextService
import static Boolean.FALSE as NO_SCROLLING
import static Boolean.TRUE as SCROLLING

class DataPoolExtractor {
    private String dataPoolFilePath_
    private HSSFWorkbook workbook_
    private HSSFSheet sheet_
    private int customerColumnIndex_, controlsListIndex_, sheetSize_

    DataPoolExtractor(String dataPoolFilePath){
        this.dataPoolFilePath_ = dataPoolFilePath
        this.workbook_ = new HSSFWorkbook(new FileInputStream(dataPoolFilePath_))
    }

    def sheetLoader = { sheetName -&gt;
        this.sheet_ = workbook_.getSheet(sheetName)
        this.sheetSize_ = sheet_.lastRowNum
    }

    def controlsListLoader = { controlsListIndex -&gt;
        HSSFRow topRow = sheet_.getRow(0)
        topRow.each { cell -&gt;
            if (cell.stringCellValue.equals(controlsListIndex)) {
                this.controlsListIndex_ = cell.getColumnIndex()
            }
        }
    }

    def customerLoader = { customerCellID -&gt;
        HSSFRow topRow = sheet_.getRow(0)
        topRow.each { cell -&gt;
            if (cell.stringCellValue.equals(customerCellID)) {
                this.customerColumnIndex_ = cell.getColumnIndex()
            }
        }
    }

    String getStringDataRecord(String controlID) {
        for (int i = 0; i &lt; sheetSize_; i++) {
            try {
                HSSFRow row = sheet_.getRow(i)
                if (row.getCell(controlsListIndex_).stringCellValue == controlID) {
                    return row.getCell(customerColumnIndex_).stringCellValue
                }
            }catch (Exception ex) {
                print ex.getMessage()
            }
        }
        return &quot;&quot;
    }
}

class ControlManager {
    private WebDriverWait driverWait_
    private DataPoolExtractor xls_
    private def browser_, log_, sampleResult_
    private final int noAttempts_ = 15

    ControlManager(WebDriverWait driverWait, DataPoolExtractor xls, browser, log, sampleResult){
        this.driverWait_ = driverWait
        this.xls_ = xls
        this.browser_ = browser
        this.log_ = log
        this.sampleResult_ = sampleResult
    }

    def waitActive = {
        browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
        driverWait_.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&apos;ajax_loader&apos;)))
        browser_.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS)
    }

    def moveTo = { field, scroll -&gt;
        browser_.executeScript(&quot;arguments[0].scrollIntoView($scroll);&quot;, field)
    }

    def reGetControl = { controlID -&gt;
        driverWait_.until(ExpectedConditions.visibilityOfElementLocated(By.id(controlID)))
        def field = browser_.findElement(By.id(controlID))
        moveTo(field, SCROLLING)
        return field
    }

    def reGetControlXPath = { controlID, controlXPath -&gt;
        driverWait_.until(ExpectedConditions.visibilityOfElementLocated(By.id(controlID)))
        def field = browser_.findElement(By.xpath(controlXPath))
        moveTo(field, SCROLLING)
        return field
    }

    def preCtrl = { controlID -&gt;
        browser_.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
        driverWait_.until(ExpectedConditions.visibilityOfElementLocated(By.id(controlID)))
        def field = browser_.findElement(By.id(controlID))
        moveTo(field, NO_SCROLLING)
        /* Sub-sample time */
        sampleResult_.subSampleStart(&quot;&gt;&gt;&gt; $controlID time&quot;)
        waitActive()
        return field
    }

    def preCtrlXPath = { controlID, controlXPath -&gt;
        browser_.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
        driverWait_.until(ExpectedConditions.visibilityOfElementLocated(By.id(controlID)))
        def field = browser_.findElement(By.xpath(controlXPath))
        moveTo(field, NO_SCROLLING)
        /* Sub-sample time */
        sampleResult_.subSampleStart(&quot;&gt;&gt;&gt; $controlID time&quot;)
        waitActive()
        return field
    }

    void selectCtrl(String controlID){
        log_.info(&quot;=== SELECT $controlID: ${xls_.getStringDataRecord(controlID)} ===&quot;)
        def field = preCtrl(controlID)
        def select = new Select(field)
        def attempt = 0
        def exceptionFlag = false

        browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
        while (attempt &lt; noAttempts_) {
            try {
                exceptionFlag = false
                select.selectByVisibleText(xls_.getStringDataRecord(controlID))
            } catch (Exception err) {
                exceptionFlag = true
                attempt++
                log_.info(&quot;=== $controlID ATTEMPTS: $attempt ===&quot;)
                field = reGetControl(controlID)
                select = new Select(field)
            } finally {
                if (!exceptionFlag) attempt = noAttempts_
            }
        }
        sampleResult_.subSampleEnd(true)
    }

    void textCtrl(String controlID){
        log_.info(&quot;=== TEXT $controlID: ${xls_.getStringDataRecord(controlID)} ===&quot;)
        def field = preCtrl(controlID)
        def attempt = 0
        def exceptionFlag = false

        browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
        while (attempt &lt; noAttempts_) {
            try {
                exceptionFlag = false
                field.click()
                field.sendKeys(xls_.getStringDataRecord(controlID))
            } catch (Exception err) {
                exceptionFlag = true
                attempt++
                log_.info(&quot;=== $controlID ATTEMPTS: $attempt ===&quot;)
                field = reGetControl(controlID)
            } finally {
                if (!exceptionFlag) attempt = noAttempts_
            }
        }
        sampleResult_.subSampleEnd(true)
    }

    void dateCtrl(String controlID){
        log_.info(&quot;=== DATE $controlID: ${xls_.getStringDataRecord(controlID)} ===&quot;)
        def field = preCtrl(controlID)
        def attempt = 0
        def exceptionFlag = false

        browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
        while (attempt &lt; noAttempts_) {
            try {
                exceptionFlag = false
                field.click()
                field.sendKeys(xls_.getStringDataRecord(controlID))
                field.sendKeys(Keys.TAB)
            } catch (Exception err) {
                exceptionFlag = true
                attempt++
                log_.info(&quot;&gt;&gt;&gt; $controlID ATTEMPTS: $attempt&quot;)
                field = reGetControl(controlID)
            } finally {
                if (!exceptionFlag) attempt = noAttempts_
            }
        }
        sampleResult_.subSampleEnd(true)
    }

    void radioButtonCtrl(String controlID){
        log_.info(&quot;=== RADIO $controlID: ${xls_.getStringDataRecord(controlID)} ===&quot;)
        if(xls_.getStringDataRecord(controlID) == &apos;Yes&apos;){
            def field = preCtrlXPath(controlID, &quot;//div[@id=&apos;&quot;+controlID+&quot;&apos;]/*/label[text()=&apos;Yes&apos;]&quot;)
            def attempt = 0
            def exceptionFlag = false

            browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
            while (attempt &lt; noAttempts_) {
                try {
                    exceptionFlag = false
                    field.click()
                } catch (Exception err) {
                    exceptionFlag = true
                    attempt++
                    log_.info(&quot;&gt;&gt;&gt; $controlID ATTEMPTS: $attempt&quot;)
                    field = reGetControlXPath(controlID, &quot;//div[@id=&apos;&quot;+controlID+&quot;&apos;]/*/label[text()=&apos;Yes&apos;]&quot;)
                } finally {
                    if (!exceptionFlag) attempt = noAttempts_
                }
            }
            sampleResult_.subSampleEnd(true)
        }
    }

    void checkBoxCtrl(String controlID){
        log_.info(&quot;=== CHECKBOX $controlID: ${xls_.getStringDataRecord(controlID)} ===&quot;)
        if(xls_.getStringDataRecord(controlID) == &apos;Check&apos;){
            def field = preCtrlXPath(controlID, &quot;//div[@id=&apos;&quot;+controlID+&quot;&apos;]/*/label&quot;)
            def attempt = 0
            def exceptionFlag = false

            browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
            while (attempt &lt; noAttempts_) {
                try {
                    exceptionFlag = false
                    field.click()
                } catch (Exception err) {
                    exceptionFlag = true
                    attempt++
                    log_.info(&quot;&gt;&gt;&gt; $controlID ATTEMPTS: $attempt&quot;)
                    field = reGetControlXPath(controlID, &quot;//div[@id=&apos;&quot;+controlID+&quot;&apos;]/*/label&quot;)
                } finally {
                    if (!exceptionFlag) attempt = noAttempts_
                }
            }
            sampleResult_.subSampleEnd(true)
        }
    }

    void buttonCtrl(String controlID){
        log_.info(&quot;=== BUTTON $controlID ===&quot;)
        def field = preCtrl(controlID)
        def attempt = 0
        def exceptionFlag = false

        browser_.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS)
        while (attempt &lt; noAttempts_) {
            try {
                exceptionFlag = false
                field.click()
            } catch (Exception err) {
                exceptionFlag = true
                attempt++
                log_.info(&quot;=== $controlID ATTEMPTS: $attempt ===&quot;)
                field = reGetControl(controlID)
            } finally {
                if (!exceptionFlag) attempt = noAttempts_
            }
        }
        sampleResult_.subSampleEnd(true)
    }
}

//vars initialize
def vars = JMeterContextService.getContext().getVariables()
def driverWait = vars.getObject(&quot;DRIVER_WAIT&quot;)

//Data pool extractor initialize
DataPoolExtractor xls = new DataPoolExtractor(&quot;C:\\\Users\\\c22466a\\\Documents\\\Diploma\\\tc-pco-create-app.xls&quot;)
xls.sheetLoader(&quot;MY_INPUTS&quot;)
xls.controlsListLoader(&quot;Field&quot;)
xls.customerLoader(&quot;TC1&quot;)

//Control manager initialize
ControlManager ctrlManager = new ControlManager(driverWait, xls, WDS.browser, WDS.log, WDS.sampleResult)


//SELECT
ctrlManager.selectCtrl(&quot;ApplicationTypeRbg&quot;)
//TEXT FIELD
ctrlManager.textCtrl(&quot;SurnameTxt&quot;)
ctrlManager.textCtrl(&quot;ForenameTxt&quot;)
//DATE
ctrlManager.dateCtrl(&quot;id2b&quot;)
//TEXT
ctrlManager.textCtrl(&quot;identificationCardNo&quot;)
//RADIO
ctrlManager.radioButtonCtrl(&quot;ProofOfAddressRbg&quot;)
ctrlManager.radioButtonCtrl(&quot;ProofOfIncomeRbg&quot;)
ctrlManager.radioButtonCtrl(&quot;PaymentProtectionRbg&quot;)
//BUTTON
ctrlManager.buttonCtrl(&quot;nav1Btn&quot;)

//TAB applicantDetailsTab
driverWait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[@id=&apos;applicantDetailsTab&apos;]/ul/li[2]&quot;))) // waiting when page will be load
WDS.sampleResult.subSampleStart(&apos;&gt;&gt;&gt; Applicant Details Tab&apos;)
WDS.browser.findElement(By.xpath(&quot;//div[@id=&apos;applicantDetailsTab&apos;]/ul/li[2]&quot;)).click()
WDS.sampleResult.subSampleEnd(true)

//CHECKBOX
ctrlManager.checkBoxCtrl(&quot;checkboxgroupviewId&quot;)</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
